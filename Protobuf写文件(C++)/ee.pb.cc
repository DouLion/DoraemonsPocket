// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ee.proto

#include "ee.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace topy_resp {
PROTOBUF_CONSTEXPR RegionResp_Header::RegionResp_Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.return_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.return_code_)*/0} {}
struct RegionResp_HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionResp_HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionResp_HeaderDefaultTypeInternal() {}
  union {
    RegionResp_Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionResp_HeaderDefaultTypeInternal _RegionResp_Header_default_instance_;
PROTOBUF_CONSTEXPR RegionResp_Body_Point2D::RegionResp_Body_Point2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct RegionResp_Body_Point2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionResp_Body_Point2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionResp_Body_Point2DDefaultTypeInternal() {}
  union {
    RegionResp_Body_Point2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionResp_Body_Point2DDefaultTypeInternal _RegionResp_Body_Point2D_default_instance_;
PROTOBUF_CONSTEXPR RegionResp_Body_LineString2D::RegionResp_Body_LineString2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegionResp_Body_LineString2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionResp_Body_LineString2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionResp_Body_LineString2DDefaultTypeInternal() {}
  union {
    RegionResp_Body_LineString2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionResp_Body_LineString2DDefaultTypeInternal _RegionResp_Body_LineString2D_default_instance_;
PROTOBUF_CONSTEXPR RegionResp_Body_Polygon::RegionResp_Body_Polygon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.line_string_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegionResp_Body_PolygonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionResp_Body_PolygonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionResp_Body_PolygonDefaultTypeInternal() {}
  union {
    RegionResp_Body_Polygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionResp_Body_PolygonDefaultTypeInternal _RegionResp_Body_Polygon_default_instance_;
PROTOBUF_CONSTEXPR RegionResp_Body_Station::RegionResp_Body_Station(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lgtd_)*/0
  , /*decltype(_impl_.lttd_)*/0} {}
struct RegionResp_Body_StationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionResp_Body_StationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionResp_Body_StationDefaultTypeInternal() {}
  union {
    RegionResp_Body_Station _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionResp_Body_StationDefaultTypeInternal _RegionResp_Body_Station_default_instance_;
PROTOBUF_CONSTEXPR RegionResp_Body::RegionResp_Body(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.coordinates_)*/{}
  , /*decltype(_impl_.stations_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RegionResp_BodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionResp_BodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionResp_BodyDefaultTypeInternal() {}
  union {
    RegionResp_Body _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionResp_BodyDefaultTypeInternal _RegionResp_Body_default_instance_;
PROTOBUF_CONSTEXPR RegionResp::RegionResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.body_)*/nullptr} {}
struct RegionRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionRespDefaultTypeInternal() {}
  union {
    RegionResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionRespDefaultTypeInternal _RegionResp_default_instance_;
}  // namespace topy_resp
namespace topy_resp {

// ===================================================================

class RegionResp_Header::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionResp_Header>()._impl_._has_bits_);
  static void set_has_return_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_return_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RegionResp_Header::RegionResp_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:topy_resp.RegionResp.Header)
}
RegionResp_Header::RegionResp_Header(const RegionResp_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RegionResp_Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.return_msg_){}
    , decltype(_impl_.return_code_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.return_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_return_msg()) {
    _this->_impl_.return_msg_.Set(from._internal_return_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.return_code_ = from._impl_.return_code_;
  // @@protoc_insertion_point(copy_constructor:topy_resp.RegionResp.Header)
}

inline void RegionResp_Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.return_msg_){}
    , decltype(_impl_.return_code_){0}
  };
  _impl_.return_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegionResp_Header::~RegionResp_Header() {
  // @@protoc_insertion_point(destructor:topy_resp.RegionResp.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionResp_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.return_msg_.Destroy();
}

void RegionResp_Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionResp_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:topy_resp.RegionResp.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.return_msg_.ClearNonDefaultToEmpty();
  }
  _impl_.return_code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RegionResp_Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string return_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_return_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 return_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_return_code(&has_bits);
          _impl_.return_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionResp_Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:topy_resp.RegionResp.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string return_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_return_msg(), target);
  }

  // required int32 return_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_return_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:topy_resp.RegionResp.Header)
  return target;
}

size_t RegionResp_Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:topy_resp.RegionResp.Header)
  size_t total_size = 0;

  if (_internal_has_return_msg()) {
    // required string return_msg = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_return_msg());
  }

  if (_internal_has_return_code()) {
    // required int32 return_code = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_return_code());
  }

  return total_size;
}
size_t RegionResp_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:topy_resp.RegionResp.Header)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string return_msg = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_return_msg());

    // required int32 return_code = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_return_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionResp_Header::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RegionResp_Header*>(
      &from));
}

void RegionResp_Header::MergeFrom(const RegionResp_Header& from) {
  RegionResp_Header* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:topy_resp.RegionResp.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_return_msg(from._internal_return_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.return_code_ = from._impl_.return_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RegionResp_Header::CopyFrom(const RegionResp_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:topy_resp.RegionResp.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionResp_Header::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RegionResp_Header::InternalSwap(RegionResp_Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.return_msg_, lhs_arena,
      &other->_impl_.return_msg_, rhs_arena
  );
  swap(_impl_.return_code_, other->_impl_.return_code_);
}

std::string RegionResp_Header::GetTypeName() const {
  return "topy_resp.RegionResp.Header";
}


// ===================================================================

class RegionResp_Body_Point2D::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionResp_Body_Point2D>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RegionResp_Body_Point2D::RegionResp_Body_Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:topy_resp.RegionResp.Body.Point2D)
}
RegionResp_Body_Point2D::RegionResp_Body_Point2D(const RegionResp_Body_Point2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RegionResp_Body_Point2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:topy_resp.RegionResp.Body.Point2D)
}

inline void RegionResp_Body_Point2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

RegionResp_Body_Point2D::~RegionResp_Body_Point2D() {
  // @@protoc_insertion_point(destructor:topy_resp.RegionResp.Body.Point2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionResp_Body_Point2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegionResp_Body_Point2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionResp_Body_Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:topy_resp.RegionResp.Body.Point2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RegionResp_Body_Point2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionResp_Body_Point2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:topy_resp.RegionResp.Body.Point2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:topy_resp.RegionResp.Body.Point2D)
  return target;
}

size_t RegionResp_Body_Point2D::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:topy_resp.RegionResp.Body.Point2D)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t RegionResp_Body_Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:topy_resp.RegionResp.Body.Point2D)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionResp_Body_Point2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RegionResp_Body_Point2D*>(
      &from));
}

void RegionResp_Body_Point2D::MergeFrom(const RegionResp_Body_Point2D& from) {
  RegionResp_Body_Point2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:topy_resp.RegionResp.Body.Point2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RegionResp_Body_Point2D::CopyFrom(const RegionResp_Body_Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:topy_resp.RegionResp.Body.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionResp_Body_Point2D::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RegionResp_Body_Point2D::InternalSwap(RegionResp_Body_Point2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionResp_Body_Point2D, _impl_.y_)
      + sizeof(RegionResp_Body_Point2D::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(RegionResp_Body_Point2D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

std::string RegionResp_Body_Point2D::GetTypeName() const {
  return "topy_resp.RegionResp.Body.Point2D";
}


// ===================================================================

class RegionResp_Body_LineString2D::_Internal {
 public:
};

RegionResp_Body_LineString2D::RegionResp_Body_LineString2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:topy_resp.RegionResp.Body.LineString2D)
}
RegionResp_Body_LineString2D::RegionResp_Body_LineString2D(const RegionResp_Body_LineString2D& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RegionResp_Body_LineString2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:topy_resp.RegionResp.Body.LineString2D)
}

inline void RegionResp_Body_LineString2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegionResp_Body_LineString2D::~RegionResp_Body_LineString2D() {
  // @@protoc_insertion_point(destructor:topy_resp.RegionResp.Body.LineString2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionResp_Body_LineString2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
}

void RegionResp_Body_LineString2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionResp_Body_LineString2D::Clear() {
// @@protoc_insertion_point(message_clear_start:topy_resp.RegionResp.Body.LineString2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RegionResp_Body_LineString2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .topy_resp.RegionResp.Body.Point2D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionResp_Body_LineString2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:topy_resp.RegionResp.Body.LineString2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .topy_resp.RegionResp.Body.Point2D points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:topy_resp.RegionResp.Body.LineString2D)
  return target;
}

size_t RegionResp_Body_LineString2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:topy_resp.RegionResp.Body.LineString2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .topy_resp.RegionResp.Body.Point2D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionResp_Body_LineString2D::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RegionResp_Body_LineString2D*>(
      &from));
}

void RegionResp_Body_LineString2D::MergeFrom(const RegionResp_Body_LineString2D& from) {
  RegionResp_Body_LineString2D* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:topy_resp.RegionResp.Body.LineString2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RegionResp_Body_LineString2D::CopyFrom(const RegionResp_Body_LineString2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:topy_resp.RegionResp.Body.LineString2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionResp_Body_LineString2D::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.points_))
    return false;
  return true;
}

void RegionResp_Body_LineString2D::InternalSwap(RegionResp_Body_LineString2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

std::string RegionResp_Body_LineString2D::GetTypeName() const {
  return "topy_resp.RegionResp.Body.LineString2D";
}


// ===================================================================

class RegionResp_Body_Polygon::_Internal {
 public:
};

RegionResp_Body_Polygon::RegionResp_Body_Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:topy_resp.RegionResp.Body.Polygon)
}
RegionResp_Body_Polygon::RegionResp_Body_Polygon(const RegionResp_Body_Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RegionResp_Body_Polygon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.line_string_){from._impl_.line_string_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:topy_resp.RegionResp.Body.Polygon)
}

inline void RegionResp_Body_Polygon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.line_string_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegionResp_Body_Polygon::~RegionResp_Body_Polygon() {
  // @@protoc_insertion_point(destructor:topy_resp.RegionResp.Body.Polygon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionResp_Body_Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.line_string_.~RepeatedPtrField();
}

void RegionResp_Body_Polygon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionResp_Body_Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:topy_resp.RegionResp.Body.Polygon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.line_string_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RegionResp_Body_Polygon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .topy_resp.RegionResp.Body.LineString2D line_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_line_string(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionResp_Body_Polygon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:topy_resp.RegionResp.Body.Polygon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .topy_resp.RegionResp.Body.LineString2D line_string = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_line_string_size()); i < n; i++) {
    const auto& repfield = this->_internal_line_string(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:topy_resp.RegionResp.Body.Polygon)
  return target;
}

size_t RegionResp_Body_Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:topy_resp.RegionResp.Body.Polygon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .topy_resp.RegionResp.Body.LineString2D line_string = 1;
  total_size += 1UL * this->_internal_line_string_size();
  for (const auto& msg : this->_impl_.line_string_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionResp_Body_Polygon::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RegionResp_Body_Polygon*>(
      &from));
}

void RegionResp_Body_Polygon::MergeFrom(const RegionResp_Body_Polygon& from) {
  RegionResp_Body_Polygon* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:topy_resp.RegionResp.Body.Polygon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.line_string_.MergeFrom(from._impl_.line_string_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RegionResp_Body_Polygon::CopyFrom(const RegionResp_Body_Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:topy_resp.RegionResp.Body.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionResp_Body_Polygon::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.line_string_))
    return false;
  return true;
}

void RegionResp_Body_Polygon::InternalSwap(RegionResp_Body_Polygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.line_string_.InternalSwap(&other->_impl_.line_string_);
}

std::string RegionResp_Body_Polygon::GetTypeName() const {
  return "topy_resp.RegionResp.Body.Polygon";
}


// ===================================================================

class RegionResp_Body_Station::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionResp_Body_Station>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lgtd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lttd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

RegionResp_Body_Station::RegionResp_Body_Station(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:topy_resp.RegionResp.Body.Station)
}
RegionResp_Body_Station::RegionResp_Body_Station(const RegionResp_Body_Station& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RegionResp_Body_Station* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.lgtd_){}
    , decltype(_impl_.lttd_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.lgtd_, &from._impl_.lgtd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lttd_) -
    reinterpret_cast<char*>(&_impl_.lgtd_)) + sizeof(_impl_.lttd_));
  // @@protoc_insertion_point(copy_constructor:topy_resp.RegionResp.Body.Station)
}

inline void RegionResp_Body_Station::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.lgtd_){0}
    , decltype(_impl_.lttd_){0}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegionResp_Body_Station::~RegionResp_Body_Station() {
  // @@protoc_insertion_point(destructor:topy_resp.RegionResp.Body.Station)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionResp_Body_Station::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
}

void RegionResp_Body_Station::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionResp_Body_Station::Clear() {
// @@protoc_insertion_point(message_clear_start:topy_resp.RegionResp.Body.Station)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.lgtd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lttd_) -
        reinterpret_cast<char*>(&_impl_.lgtd_)) + sizeof(_impl_.lttd_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RegionResp_Body_Station::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float lgtd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_lgtd(&has_bits);
          _impl_.lgtd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float lttd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_lttd(&has_bits);
          _impl_.lttd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionResp_Body_Station::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:topy_resp.RegionResp.Body.Station)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // required float lgtd = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_lgtd(), target);
  }

  // required float lttd = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_lttd(), target);
  }

  // required string name = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // required string type = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:topy_resp.RegionResp.Body.Station)
  return target;
}

size_t RegionResp_Body_Station::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:topy_resp.RegionResp.Body.Station)
  size_t total_size = 0;

  if (_internal_has_code()) {
    // required string code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  if (_internal_has_name()) {
    // required string name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_type()) {
    // required string type = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (_internal_has_lgtd()) {
    // required float lgtd = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_lttd()) {
    // required float lttd = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t RegionResp_Body_Station::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:topy_resp.RegionResp.Body.Station)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());

    // required string name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string type = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required float lgtd = 2;
    total_size += 1 + 4;

    // required float lttd = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionResp_Body_Station::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RegionResp_Body_Station*>(
      &from));
}

void RegionResp_Body_Station::MergeFrom(const RegionResp_Body_Station& from) {
  RegionResp_Body_Station* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:topy_resp.RegionResp.Body.Station)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lgtd_ = from._impl_.lgtd_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lttd_ = from._impl_.lttd_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RegionResp_Body_Station::CopyFrom(const RegionResp_Body_Station& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:topy_resp.RegionResp.Body.Station)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionResp_Body_Station::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RegionResp_Body_Station::InternalSwap(RegionResp_Body_Station* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionResp_Body_Station, _impl_.lttd_)
      + sizeof(RegionResp_Body_Station::_impl_.lttd_)
      - PROTOBUF_FIELD_OFFSET(RegionResp_Body_Station, _impl_.lgtd_)>(
          reinterpret_cast<char*>(&_impl_.lgtd_),
          reinterpret_cast<char*>(&other->_impl_.lgtd_));
}

std::string RegionResp_Body_Station::GetTypeName() const {
  return "topy_resp.RegionResp.Body.Station";
}


// ===================================================================

class RegionResp_Body::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionResp_Body>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RegionResp_Body::RegionResp_Body(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:topy_resp.RegionResp.Body)
}
RegionResp_Body::RegionResp_Body(const RegionResp_Body& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RegionResp_Body* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coordinates_){from._impl_.coordinates_}
    , decltype(_impl_.stations_){from._impl_.stations_}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:topy_resp.RegionResp.Body)
}

inline void RegionResp_Body::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coordinates_){arena}
    , decltype(_impl_.stations_){arena}
    , decltype(_impl_.id_){}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegionResp_Body::~RegionResp_Body() {
  // @@protoc_insertion_point(destructor:topy_resp.RegionResp.Body)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionResp_Body::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coordinates_.~RepeatedPtrField();
  _impl_.stations_.~RepeatedPtrField();
  _impl_.id_.Destroy();
}

void RegionResp_Body::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionResp_Body::Clear() {
// @@protoc_insertion_point(message_clear_start:topy_resp.RegionResp.Body)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coordinates_.Clear();
  _impl_.stations_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RegionResp_Body::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .topy_resp.RegionResp.Body.Polygon coordinates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coordinates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .topy_resp.RegionResp.Body.Station stations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionResp_Body::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:topy_resp.RegionResp.Body)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .topy_resp.RegionResp.Body.Polygon coordinates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coordinates_size()); i < n; i++) {
    const auto& repfield = this->_internal_coordinates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required string id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // repeated .topy_resp.RegionResp.Body.Station stations = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stations_size()); i < n; i++) {
    const auto& repfield = this->_internal_stations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:topy_resp.RegionResp.Body)
  return target;
}

size_t RegionResp_Body::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:topy_resp.RegionResp.Body)
  size_t total_size = 0;

  // required string id = 2;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .topy_resp.RegionResp.Body.Polygon coordinates = 1;
  total_size += 1UL * this->_internal_coordinates_size();
  for (const auto& msg : this->_impl_.coordinates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .topy_resp.RegionResp.Body.Station stations = 3;
  total_size += 1UL * this->_internal_stations_size();
  for (const auto& msg : this->_impl_.stations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionResp_Body::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RegionResp_Body*>(
      &from));
}

void RegionResp_Body::MergeFrom(const RegionResp_Body& from) {
  RegionResp_Body* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:topy_resp.RegionResp.Body)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.coordinates_.MergeFrom(from._impl_.coordinates_);
  _this->_impl_.stations_.MergeFrom(from._impl_.stations_);
  if (from._internal_has_id()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RegionResp_Body::CopyFrom(const RegionResp_Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:topy_resp.RegionResp.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionResp_Body::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.coordinates_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.stations_))
    return false;
  return true;
}

void RegionResp_Body::InternalSwap(RegionResp_Body* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.coordinates_.InternalSwap(&other->_impl_.coordinates_);
  _impl_.stations_.InternalSwap(&other->_impl_.stations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

std::string RegionResp_Body::GetTypeName() const {
  return "topy_resp.RegionResp.Body";
}


// ===================================================================

class RegionResp::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionResp>()._impl_._has_bits_);
  static const ::topy_resp::RegionResp_Header& header(const RegionResp* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::topy_resp::RegionResp_Body& body(const RegionResp* msg);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::topy_resp::RegionResp_Header&
RegionResp::_Internal::header(const RegionResp* msg) {
  return *msg->_impl_.header_;
}
const ::topy_resp::RegionResp_Body&
RegionResp::_Internal::body(const RegionResp* msg) {
  return *msg->_impl_.body_;
}
RegionResp::RegionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:topy_resp.RegionResp)
}
RegionResp::RegionResp(const RegionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RegionResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.body_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::topy_resp::RegionResp_Header(*from._impl_.header_);
  }
  if (from._internal_has_body()) {
    _this->_impl_.body_ = new ::topy_resp::RegionResp_Body(*from._impl_.body_);
  }
  // @@protoc_insertion_point(copy_constructor:topy_resp.RegionResp)
}

inline void RegionResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.body_){nullptr}
  };
}

RegionResp::~RegionResp() {
  // @@protoc_insertion_point(destructor:topy_resp.RegionResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.body_;
}

void RegionResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:topy_resp.RegionResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.body_ != nullptr);
      _impl_.body_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RegionResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .topy_resp.RegionResp.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .topy_resp.RegionResp.Body body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:topy_resp.RegionResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .topy_resp.RegionResp.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // required .topy_resp.RegionResp.Body body = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::body(this),
        _Internal::body(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:topy_resp.RegionResp)
  return target;
}

size_t RegionResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:topy_resp.RegionResp)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required .topy_resp.RegionResp.Header header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  if (_internal_has_body()) {
    // required .topy_resp.RegionResp.Body body = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_);
  }

  return total_size;
}
size_t RegionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:topy_resp.RegionResp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .topy_resp.RegionResp.Header header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);

    // required .topy_resp.RegionResp.Body body = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionResp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RegionResp*>(
      &from));
}

void RegionResp::MergeFrom(const RegionResp& from) {
  RegionResp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:topy_resp.RegionResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::topy_resp::RegionResp_Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_body()->::topy_resp::RegionResp_Body::MergeFrom(
          from._internal_body());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RegionResp::CopyFrom(const RegionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:topy_resp.RegionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionResp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_header()) {
    if (!_impl_.header_->IsInitialized()) return false;
  }
  if (_internal_has_body()) {
    if (!_impl_.body_->IsInitialized()) return false;
  }
  return true;
}

void RegionResp::InternalSwap(RegionResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionResp, _impl_.body_)
      + sizeof(RegionResp::_impl_.body_)
      - PROTOBUF_FIELD_OFFSET(RegionResp, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

std::string RegionResp::GetTypeName() const {
  return "topy_resp.RegionResp";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace topy_resp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::topy_resp::RegionResp_Header*
Arena::CreateMaybeMessage< ::topy_resp::RegionResp_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::topy_resp::RegionResp_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::topy_resp::RegionResp_Body_Point2D*
Arena::CreateMaybeMessage< ::topy_resp::RegionResp_Body_Point2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::topy_resp::RegionResp_Body_Point2D >(arena);
}
template<> PROTOBUF_NOINLINE ::topy_resp::RegionResp_Body_LineString2D*
Arena::CreateMaybeMessage< ::topy_resp::RegionResp_Body_LineString2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::topy_resp::RegionResp_Body_LineString2D >(arena);
}
template<> PROTOBUF_NOINLINE ::topy_resp::RegionResp_Body_Polygon*
Arena::CreateMaybeMessage< ::topy_resp::RegionResp_Body_Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::topy_resp::RegionResp_Body_Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::topy_resp::RegionResp_Body_Station*
Arena::CreateMaybeMessage< ::topy_resp::RegionResp_Body_Station >(Arena* arena) {
  return Arena::CreateMessageInternal< ::topy_resp::RegionResp_Body_Station >(arena);
}
template<> PROTOBUF_NOINLINE ::topy_resp::RegionResp_Body*
Arena::CreateMaybeMessage< ::topy_resp::RegionResp_Body >(Arena* arena) {
  return Arena::CreateMessageInternal< ::topy_resp::RegionResp_Body >(arena);
}
template<> PROTOBUF_NOINLINE ::topy_resp::RegionResp*
Arena::CreateMaybeMessage< ::topy_resp::RegionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::topy_resp::RegionResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
