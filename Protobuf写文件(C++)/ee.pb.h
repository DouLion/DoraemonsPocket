// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ee.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ee_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ee_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ee_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ee_2eproto {
  static const uint32_t offsets[];
};
namespace topy_resp {
class RegionResp;
struct RegionRespDefaultTypeInternal;
extern RegionRespDefaultTypeInternal _RegionResp_default_instance_;
class RegionResp_Body;
struct RegionResp_BodyDefaultTypeInternal;
extern RegionResp_BodyDefaultTypeInternal _RegionResp_Body_default_instance_;
class RegionResp_Body_LineString2D;
struct RegionResp_Body_LineString2DDefaultTypeInternal;
extern RegionResp_Body_LineString2DDefaultTypeInternal _RegionResp_Body_LineString2D_default_instance_;
class RegionResp_Body_Point2D;
struct RegionResp_Body_Point2DDefaultTypeInternal;
extern RegionResp_Body_Point2DDefaultTypeInternal _RegionResp_Body_Point2D_default_instance_;
class RegionResp_Body_Polygon;
struct RegionResp_Body_PolygonDefaultTypeInternal;
extern RegionResp_Body_PolygonDefaultTypeInternal _RegionResp_Body_Polygon_default_instance_;
class RegionResp_Body_Station;
struct RegionResp_Body_StationDefaultTypeInternal;
extern RegionResp_Body_StationDefaultTypeInternal _RegionResp_Body_Station_default_instance_;
class RegionResp_Header;
struct RegionResp_HeaderDefaultTypeInternal;
extern RegionResp_HeaderDefaultTypeInternal _RegionResp_Header_default_instance_;
}  // namespace topy_resp
PROTOBUF_NAMESPACE_OPEN
template<> ::topy_resp::RegionResp* Arena::CreateMaybeMessage<::topy_resp::RegionResp>(Arena*);
template<> ::topy_resp::RegionResp_Body* Arena::CreateMaybeMessage<::topy_resp::RegionResp_Body>(Arena*);
template<> ::topy_resp::RegionResp_Body_LineString2D* Arena::CreateMaybeMessage<::topy_resp::RegionResp_Body_LineString2D>(Arena*);
template<> ::topy_resp::RegionResp_Body_Point2D* Arena::CreateMaybeMessage<::topy_resp::RegionResp_Body_Point2D>(Arena*);
template<> ::topy_resp::RegionResp_Body_Polygon* Arena::CreateMaybeMessage<::topy_resp::RegionResp_Body_Polygon>(Arena*);
template<> ::topy_resp::RegionResp_Body_Station* Arena::CreateMaybeMessage<::topy_resp::RegionResp_Body_Station>(Arena*);
template<> ::topy_resp::RegionResp_Header* Arena::CreateMaybeMessage<::topy_resp::RegionResp_Header>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace topy_resp {

// ===================================================================

class RegionResp_Header final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:topy_resp.RegionResp.Header) */ {
 public:
  inline RegionResp_Header() : RegionResp_Header(nullptr) {}
  ~RegionResp_Header() override;
  explicit PROTOBUF_CONSTEXPR RegionResp_Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionResp_Header(const RegionResp_Header& from);
  RegionResp_Header(RegionResp_Header&& from) noexcept
    : RegionResp_Header() {
    *this = ::std::move(from);
  }

  inline RegionResp_Header& operator=(const RegionResp_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionResp_Header& operator=(RegionResp_Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegionResp_Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionResp_Header* internal_default_instance() {
    return reinterpret_cast<const RegionResp_Header*>(
               &_RegionResp_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegionResp_Header& a, RegionResp_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionResp_Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionResp_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionResp_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionResp_Header>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegionResp_Header& from);
  void MergeFrom(const RegionResp_Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionResp_Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "topy_resp.RegionResp.Header";
  }
  protected:
  explicit RegionResp_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnMsgFieldNumber = 1,
    kReturnCodeFieldNumber = 2,
  };
  // required string return_msg = 1;
  bool has_return_msg() const;
  private:
  bool _internal_has_return_msg() const;
  public:
  void clear_return_msg();
  const std::string& return_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_return_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_return_msg();
  PROTOBUF_NODISCARD std::string* release_return_msg();
  void set_allocated_return_msg(std::string* return_msg);
  private:
  const std::string& _internal_return_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_return_msg(const std::string& value);
  std::string* _internal_mutable_return_msg();
  public:

  // required int32 return_code = 2;
  bool has_return_code() const;
  private:
  bool _internal_has_return_code() const;
  public:
  void clear_return_code();
  int32_t return_code() const;
  void set_return_code(int32_t value);
  private:
  int32_t _internal_return_code() const;
  void _internal_set_return_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:topy_resp.RegionResp.Header)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr return_msg_;
    int32_t return_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ee_2eproto;
};
// -------------------------------------------------------------------

class RegionResp_Body_Point2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:topy_resp.RegionResp.Body.Point2D) */ {
 public:
  inline RegionResp_Body_Point2D() : RegionResp_Body_Point2D(nullptr) {}
  ~RegionResp_Body_Point2D() override;
  explicit PROTOBUF_CONSTEXPR RegionResp_Body_Point2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionResp_Body_Point2D(const RegionResp_Body_Point2D& from);
  RegionResp_Body_Point2D(RegionResp_Body_Point2D&& from) noexcept
    : RegionResp_Body_Point2D() {
    *this = ::std::move(from);
  }

  inline RegionResp_Body_Point2D& operator=(const RegionResp_Body_Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionResp_Body_Point2D& operator=(RegionResp_Body_Point2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegionResp_Body_Point2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionResp_Body_Point2D* internal_default_instance() {
    return reinterpret_cast<const RegionResp_Body_Point2D*>(
               &_RegionResp_Body_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegionResp_Body_Point2D& a, RegionResp_Body_Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionResp_Body_Point2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionResp_Body_Point2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionResp_Body_Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionResp_Body_Point2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegionResp_Body_Point2D& from);
  void MergeFrom(const RegionResp_Body_Point2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionResp_Body_Point2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "topy_resp.RegionResp.Body.Point2D";
  }
  protected:
  explicit RegionResp_Body_Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:topy_resp.RegionResp.Body.Point2D)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ee_2eproto;
};
// -------------------------------------------------------------------

class RegionResp_Body_LineString2D final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:topy_resp.RegionResp.Body.LineString2D) */ {
 public:
  inline RegionResp_Body_LineString2D() : RegionResp_Body_LineString2D(nullptr) {}
  ~RegionResp_Body_LineString2D() override;
  explicit PROTOBUF_CONSTEXPR RegionResp_Body_LineString2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionResp_Body_LineString2D(const RegionResp_Body_LineString2D& from);
  RegionResp_Body_LineString2D(RegionResp_Body_LineString2D&& from) noexcept
    : RegionResp_Body_LineString2D() {
    *this = ::std::move(from);
  }

  inline RegionResp_Body_LineString2D& operator=(const RegionResp_Body_LineString2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionResp_Body_LineString2D& operator=(RegionResp_Body_LineString2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegionResp_Body_LineString2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionResp_Body_LineString2D* internal_default_instance() {
    return reinterpret_cast<const RegionResp_Body_LineString2D*>(
               &_RegionResp_Body_LineString2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegionResp_Body_LineString2D& a, RegionResp_Body_LineString2D& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionResp_Body_LineString2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionResp_Body_LineString2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionResp_Body_LineString2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionResp_Body_LineString2D>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegionResp_Body_LineString2D& from);
  void MergeFrom(const RegionResp_Body_LineString2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionResp_Body_LineString2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "topy_resp.RegionResp.Body.LineString2D";
  }
  protected:
  explicit RegionResp_Body_LineString2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .topy_resp.RegionResp.Body.Point2D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::topy_resp::RegionResp_Body_Point2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Point2D >*
      mutable_points();
  private:
  const ::topy_resp::RegionResp_Body_Point2D& _internal_points(int index) const;
  ::topy_resp::RegionResp_Body_Point2D* _internal_add_points();
  public:
  const ::topy_resp::RegionResp_Body_Point2D& points(int index) const;
  ::topy_resp::RegionResp_Body_Point2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Point2D >&
      points() const;

  // @@protoc_insertion_point(class_scope:topy_resp.RegionResp.Body.LineString2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Point2D > points_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ee_2eproto;
};
// -------------------------------------------------------------------

class RegionResp_Body_Polygon final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:topy_resp.RegionResp.Body.Polygon) */ {
 public:
  inline RegionResp_Body_Polygon() : RegionResp_Body_Polygon(nullptr) {}
  ~RegionResp_Body_Polygon() override;
  explicit PROTOBUF_CONSTEXPR RegionResp_Body_Polygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionResp_Body_Polygon(const RegionResp_Body_Polygon& from);
  RegionResp_Body_Polygon(RegionResp_Body_Polygon&& from) noexcept
    : RegionResp_Body_Polygon() {
    *this = ::std::move(from);
  }

  inline RegionResp_Body_Polygon& operator=(const RegionResp_Body_Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionResp_Body_Polygon& operator=(RegionResp_Body_Polygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegionResp_Body_Polygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionResp_Body_Polygon* internal_default_instance() {
    return reinterpret_cast<const RegionResp_Body_Polygon*>(
               &_RegionResp_Body_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegionResp_Body_Polygon& a, RegionResp_Body_Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionResp_Body_Polygon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionResp_Body_Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionResp_Body_Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionResp_Body_Polygon>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegionResp_Body_Polygon& from);
  void MergeFrom(const RegionResp_Body_Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionResp_Body_Polygon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "topy_resp.RegionResp.Body.Polygon";
  }
  protected:
  explicit RegionResp_Body_Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineStringFieldNumber = 1,
  };
  // repeated .topy_resp.RegionResp.Body.LineString2D line_string = 1;
  int line_string_size() const;
  private:
  int _internal_line_string_size() const;
  public:
  void clear_line_string();
  ::topy_resp::RegionResp_Body_LineString2D* mutable_line_string(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_LineString2D >*
      mutable_line_string();
  private:
  const ::topy_resp::RegionResp_Body_LineString2D& _internal_line_string(int index) const;
  ::topy_resp::RegionResp_Body_LineString2D* _internal_add_line_string();
  public:
  const ::topy_resp::RegionResp_Body_LineString2D& line_string(int index) const;
  ::topy_resp::RegionResp_Body_LineString2D* add_line_string();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_LineString2D >&
      line_string() const;

  // @@protoc_insertion_point(class_scope:topy_resp.RegionResp.Body.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_LineString2D > line_string_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ee_2eproto;
};
// -------------------------------------------------------------------

class RegionResp_Body_Station final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:topy_resp.RegionResp.Body.Station) */ {
 public:
  inline RegionResp_Body_Station() : RegionResp_Body_Station(nullptr) {}
  ~RegionResp_Body_Station() override;
  explicit PROTOBUF_CONSTEXPR RegionResp_Body_Station(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionResp_Body_Station(const RegionResp_Body_Station& from);
  RegionResp_Body_Station(RegionResp_Body_Station&& from) noexcept
    : RegionResp_Body_Station() {
    *this = ::std::move(from);
  }

  inline RegionResp_Body_Station& operator=(const RegionResp_Body_Station& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionResp_Body_Station& operator=(RegionResp_Body_Station&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegionResp_Body_Station& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionResp_Body_Station* internal_default_instance() {
    return reinterpret_cast<const RegionResp_Body_Station*>(
               &_RegionResp_Body_Station_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegionResp_Body_Station& a, RegionResp_Body_Station& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionResp_Body_Station* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionResp_Body_Station* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionResp_Body_Station* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionResp_Body_Station>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegionResp_Body_Station& from);
  void MergeFrom(const RegionResp_Body_Station& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionResp_Body_Station* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "topy_resp.RegionResp.Body.Station";
  }
  protected:
  explicit RegionResp_Body_Station(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kNameFieldNumber = 4,
    kTypeFieldNumber = 5,
    kLgtdFieldNumber = 2,
    kLttdFieldNumber = 3,
  };
  // required string code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // required string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required float lgtd = 2;
  bool has_lgtd() const;
  private:
  bool _internal_has_lgtd() const;
  public:
  void clear_lgtd();
  float lgtd() const;
  void set_lgtd(float value);
  private:
  float _internal_lgtd() const;
  void _internal_set_lgtd(float value);
  public:

  // required float lttd = 3;
  bool has_lttd() const;
  private:
  bool _internal_has_lttd() const;
  public:
  void clear_lttd();
  float lttd() const;
  void set_lttd(float value);
  private:
  float _internal_lttd() const;
  void _internal_set_lttd(float value);
  public:

  // @@protoc_insertion_point(class_scope:topy_resp.RegionResp.Body.Station)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    float lgtd_;
    float lttd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ee_2eproto;
};
// -------------------------------------------------------------------

class RegionResp_Body final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:topy_resp.RegionResp.Body) */ {
 public:
  inline RegionResp_Body() : RegionResp_Body(nullptr) {}
  ~RegionResp_Body() override;
  explicit PROTOBUF_CONSTEXPR RegionResp_Body(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionResp_Body(const RegionResp_Body& from);
  RegionResp_Body(RegionResp_Body&& from) noexcept
    : RegionResp_Body() {
    *this = ::std::move(from);
  }

  inline RegionResp_Body& operator=(const RegionResp_Body& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionResp_Body& operator=(RegionResp_Body&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegionResp_Body& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionResp_Body* internal_default_instance() {
    return reinterpret_cast<const RegionResp_Body*>(
               &_RegionResp_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegionResp_Body& a, RegionResp_Body& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionResp_Body* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionResp_Body* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionResp_Body* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionResp_Body>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegionResp_Body& from);
  void MergeFrom(const RegionResp_Body& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionResp_Body* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "topy_resp.RegionResp.Body";
  }
  protected:
  explicit RegionResp_Body(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RegionResp_Body_Point2D Point2D;
  typedef RegionResp_Body_LineString2D LineString2D;
  typedef RegionResp_Body_Polygon Polygon;
  typedef RegionResp_Body_Station Station;

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatesFieldNumber = 1,
    kStationsFieldNumber = 3,
    kIdFieldNumber = 2,
  };
  // repeated .topy_resp.RegionResp.Body.Polygon coordinates = 1;
  int coordinates_size() const;
  private:
  int _internal_coordinates_size() const;
  public:
  void clear_coordinates();
  ::topy_resp::RegionResp_Body_Polygon* mutable_coordinates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Polygon >*
      mutable_coordinates();
  private:
  const ::topy_resp::RegionResp_Body_Polygon& _internal_coordinates(int index) const;
  ::topy_resp::RegionResp_Body_Polygon* _internal_add_coordinates();
  public:
  const ::topy_resp::RegionResp_Body_Polygon& coordinates(int index) const;
  ::topy_resp::RegionResp_Body_Polygon* add_coordinates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Polygon >&
      coordinates() const;

  // repeated .topy_resp.RegionResp.Body.Station stations = 3;
  int stations_size() const;
  private:
  int _internal_stations_size() const;
  public:
  void clear_stations();
  ::topy_resp::RegionResp_Body_Station* mutable_stations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Station >*
      mutable_stations();
  private:
  const ::topy_resp::RegionResp_Body_Station& _internal_stations(int index) const;
  ::topy_resp::RegionResp_Body_Station* _internal_add_stations();
  public:
  const ::topy_resp::RegionResp_Body_Station& stations(int index) const;
  ::topy_resp::RegionResp_Body_Station* add_stations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Station >&
      stations() const;

  // required string id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:topy_resp.RegionResp.Body)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Polygon > coordinates_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Station > stations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ee_2eproto;
};
// -------------------------------------------------------------------

class RegionResp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:topy_resp.RegionResp) */ {
 public:
  inline RegionResp() : RegionResp(nullptr) {}
  ~RegionResp() override;
  explicit PROTOBUF_CONSTEXPR RegionResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionResp(const RegionResp& from);
  RegionResp(RegionResp&& from) noexcept
    : RegionResp() {
    *this = ::std::move(from);
  }

  inline RegionResp& operator=(const RegionResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionResp& operator=(RegionResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegionResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionResp* internal_default_instance() {
    return reinterpret_cast<const RegionResp*>(
               &_RegionResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegionResp& a, RegionResp& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionResp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegionResp& from);
  void MergeFrom(const RegionResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "topy_resp.RegionResp";
  }
  protected:
  explicit RegionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RegionResp_Header Header;
  typedef RegionResp_Body Body;

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // required .topy_resp.RegionResp.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::topy_resp::RegionResp_Header& header() const;
  PROTOBUF_NODISCARD ::topy_resp::RegionResp_Header* release_header();
  ::topy_resp::RegionResp_Header* mutable_header();
  void set_allocated_header(::topy_resp::RegionResp_Header* header);
  private:
  const ::topy_resp::RegionResp_Header& _internal_header() const;
  ::topy_resp::RegionResp_Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::topy_resp::RegionResp_Header* header);
  ::topy_resp::RegionResp_Header* unsafe_arena_release_header();

  // required .topy_resp.RegionResp.Body body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::topy_resp::RegionResp_Body& body() const;
  PROTOBUF_NODISCARD ::topy_resp::RegionResp_Body* release_body();
  ::topy_resp::RegionResp_Body* mutable_body();
  void set_allocated_body(::topy_resp::RegionResp_Body* body);
  private:
  const ::topy_resp::RegionResp_Body& _internal_body() const;
  ::topy_resp::RegionResp_Body* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::topy_resp::RegionResp_Body* body);
  ::topy_resp::RegionResp_Body* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:topy_resp.RegionResp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::topy_resp::RegionResp_Header* header_;
    ::topy_resp::RegionResp_Body* body_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ee_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegionResp_Header

// required string return_msg = 1;
inline bool RegionResp_Header::_internal_has_return_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionResp_Header::has_return_msg() const {
  return _internal_has_return_msg();
}
inline void RegionResp_Header::clear_return_msg() {
  _impl_.return_msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegionResp_Header::return_msg() const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Header.return_msg)
  return _internal_return_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegionResp_Header::set_return_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.return_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:topy_resp.RegionResp.Header.return_msg)
}
inline std::string* RegionResp_Header::mutable_return_msg() {
  std::string* _s = _internal_mutable_return_msg();
  // @@protoc_insertion_point(field_mutable:topy_resp.RegionResp.Header.return_msg)
  return _s;
}
inline const std::string& RegionResp_Header::_internal_return_msg() const {
  return _impl_.return_msg_.Get();
}
inline void RegionResp_Header::_internal_set_return_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.return_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* RegionResp_Header::_internal_mutable_return_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.return_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* RegionResp_Header::release_return_msg() {
  // @@protoc_insertion_point(field_release:topy_resp.RegionResp.Header.return_msg)
  if (!_internal_has_return_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.return_msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.return_msg_.IsDefault()) {
    _impl_.return_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegionResp_Header::set_allocated_return_msg(std::string* return_msg) {
  if (return_msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.return_msg_.SetAllocated(return_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.return_msg_.IsDefault()) {
    _impl_.return_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:topy_resp.RegionResp.Header.return_msg)
}

// required int32 return_code = 2;
inline bool RegionResp_Header::_internal_has_return_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionResp_Header::has_return_code() const {
  return _internal_has_return_code();
}
inline void RegionResp_Header::clear_return_code() {
  _impl_.return_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t RegionResp_Header::_internal_return_code() const {
  return _impl_.return_code_;
}
inline int32_t RegionResp_Header::return_code() const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Header.return_code)
  return _internal_return_code();
}
inline void RegionResp_Header::_internal_set_return_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.return_code_ = value;
}
inline void RegionResp_Header::set_return_code(int32_t value) {
  _internal_set_return_code(value);
  // @@protoc_insertion_point(field_set:topy_resp.RegionResp.Header.return_code)
}

// -------------------------------------------------------------------

// RegionResp_Body_Point2D

// required float x = 1;
inline bool RegionResp_Body_Point2D::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionResp_Body_Point2D::has_x() const {
  return _internal_has_x();
}
inline void RegionResp_Body_Point2D::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float RegionResp_Body_Point2D::_internal_x() const {
  return _impl_.x_;
}
inline float RegionResp_Body_Point2D::x() const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Body.Point2D.x)
  return _internal_x();
}
inline void RegionResp_Body_Point2D::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void RegionResp_Body_Point2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:topy_resp.RegionResp.Body.Point2D.x)
}

// required float y = 2;
inline bool RegionResp_Body_Point2D::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionResp_Body_Point2D::has_y() const {
  return _internal_has_y();
}
inline void RegionResp_Body_Point2D::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float RegionResp_Body_Point2D::_internal_y() const {
  return _impl_.y_;
}
inline float RegionResp_Body_Point2D::y() const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Body.Point2D.y)
  return _internal_y();
}
inline void RegionResp_Body_Point2D::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void RegionResp_Body_Point2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:topy_resp.RegionResp.Body.Point2D.y)
}

// -------------------------------------------------------------------

// RegionResp_Body_LineString2D

// repeated .topy_resp.RegionResp.Body.Point2D points = 1;
inline int RegionResp_Body_LineString2D::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int RegionResp_Body_LineString2D::points_size() const {
  return _internal_points_size();
}
inline void RegionResp_Body_LineString2D::clear_points() {
  _impl_.points_.Clear();
}
inline ::topy_resp::RegionResp_Body_Point2D* RegionResp_Body_LineString2D::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:topy_resp.RegionResp.Body.LineString2D.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Point2D >*
RegionResp_Body_LineString2D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:topy_resp.RegionResp.Body.LineString2D.points)
  return &_impl_.points_;
}
inline const ::topy_resp::RegionResp_Body_Point2D& RegionResp_Body_LineString2D::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::topy_resp::RegionResp_Body_Point2D& RegionResp_Body_LineString2D::points(int index) const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Body.LineString2D.points)
  return _internal_points(index);
}
inline ::topy_resp::RegionResp_Body_Point2D* RegionResp_Body_LineString2D::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::topy_resp::RegionResp_Body_Point2D* RegionResp_Body_LineString2D::add_points() {
  ::topy_resp::RegionResp_Body_Point2D* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:topy_resp.RegionResp.Body.LineString2D.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Point2D >&
RegionResp_Body_LineString2D::points() const {
  // @@protoc_insertion_point(field_list:topy_resp.RegionResp.Body.LineString2D.points)
  return _impl_.points_;
}

// -------------------------------------------------------------------

// RegionResp_Body_Polygon

// repeated .topy_resp.RegionResp.Body.LineString2D line_string = 1;
inline int RegionResp_Body_Polygon::_internal_line_string_size() const {
  return _impl_.line_string_.size();
}
inline int RegionResp_Body_Polygon::line_string_size() const {
  return _internal_line_string_size();
}
inline void RegionResp_Body_Polygon::clear_line_string() {
  _impl_.line_string_.Clear();
}
inline ::topy_resp::RegionResp_Body_LineString2D* RegionResp_Body_Polygon::mutable_line_string(int index) {
  // @@protoc_insertion_point(field_mutable:topy_resp.RegionResp.Body.Polygon.line_string)
  return _impl_.line_string_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_LineString2D >*
RegionResp_Body_Polygon::mutable_line_string() {
  // @@protoc_insertion_point(field_mutable_list:topy_resp.RegionResp.Body.Polygon.line_string)
  return &_impl_.line_string_;
}
inline const ::topy_resp::RegionResp_Body_LineString2D& RegionResp_Body_Polygon::_internal_line_string(int index) const {
  return _impl_.line_string_.Get(index);
}
inline const ::topy_resp::RegionResp_Body_LineString2D& RegionResp_Body_Polygon::line_string(int index) const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Body.Polygon.line_string)
  return _internal_line_string(index);
}
inline ::topy_resp::RegionResp_Body_LineString2D* RegionResp_Body_Polygon::_internal_add_line_string() {
  return _impl_.line_string_.Add();
}
inline ::topy_resp::RegionResp_Body_LineString2D* RegionResp_Body_Polygon::add_line_string() {
  ::topy_resp::RegionResp_Body_LineString2D* _add = _internal_add_line_string();
  // @@protoc_insertion_point(field_add:topy_resp.RegionResp.Body.Polygon.line_string)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_LineString2D >&
RegionResp_Body_Polygon::line_string() const {
  // @@protoc_insertion_point(field_list:topy_resp.RegionResp.Body.Polygon.line_string)
  return _impl_.line_string_;
}

// -------------------------------------------------------------------

// RegionResp_Body_Station

// required string code = 1;
inline bool RegionResp_Body_Station::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionResp_Body_Station::has_code() const {
  return _internal_has_code();
}
inline void RegionResp_Body_Station::clear_code() {
  _impl_.code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegionResp_Body_Station::code() const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Body.Station.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegionResp_Body_Station::set_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:topy_resp.RegionResp.Body.Station.code)
}
inline std::string* RegionResp_Body_Station::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:topy_resp.RegionResp.Body.Station.code)
  return _s;
}
inline const std::string& RegionResp_Body_Station::_internal_code() const {
  return _impl_.code_.Get();
}
inline void RegionResp_Body_Station::_internal_set_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* RegionResp_Body_Station::_internal_mutable_code() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* RegionResp_Body_Station::release_code() {
  // @@protoc_insertion_point(field_release:topy_resp.RegionResp.Body.Station.code)
  if (!_internal_has_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegionResp_Body_Station::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:topy_resp.RegionResp.Body.Station.code)
}

// required float lgtd = 2;
inline bool RegionResp_Body_Station::_internal_has_lgtd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegionResp_Body_Station::has_lgtd() const {
  return _internal_has_lgtd();
}
inline void RegionResp_Body_Station::clear_lgtd() {
  _impl_.lgtd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float RegionResp_Body_Station::_internal_lgtd() const {
  return _impl_.lgtd_;
}
inline float RegionResp_Body_Station::lgtd() const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Body.Station.lgtd)
  return _internal_lgtd();
}
inline void RegionResp_Body_Station::_internal_set_lgtd(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.lgtd_ = value;
}
inline void RegionResp_Body_Station::set_lgtd(float value) {
  _internal_set_lgtd(value);
  // @@protoc_insertion_point(field_set:topy_resp.RegionResp.Body.Station.lgtd)
}

// required float lttd = 3;
inline bool RegionResp_Body_Station::_internal_has_lttd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RegionResp_Body_Station::has_lttd() const {
  return _internal_has_lttd();
}
inline void RegionResp_Body_Station::clear_lttd() {
  _impl_.lttd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float RegionResp_Body_Station::_internal_lttd() const {
  return _impl_.lttd_;
}
inline float RegionResp_Body_Station::lttd() const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Body.Station.lttd)
  return _internal_lttd();
}
inline void RegionResp_Body_Station::_internal_set_lttd(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.lttd_ = value;
}
inline void RegionResp_Body_Station::set_lttd(float value) {
  _internal_set_lttd(value);
  // @@protoc_insertion_point(field_set:topy_resp.RegionResp.Body.Station.lttd)
}

// required string name = 4;
inline bool RegionResp_Body_Station::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionResp_Body_Station::has_name() const {
  return _internal_has_name();
}
inline void RegionResp_Body_Station::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RegionResp_Body_Station::name() const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Body.Station.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegionResp_Body_Station::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:topy_resp.RegionResp.Body.Station.name)
}
inline std::string* RegionResp_Body_Station::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:topy_resp.RegionResp.Body.Station.name)
  return _s;
}
inline const std::string& RegionResp_Body_Station::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RegionResp_Body_Station::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegionResp_Body_Station::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegionResp_Body_Station::release_name() {
  // @@protoc_insertion_point(field_release:topy_resp.RegionResp.Body.Station.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegionResp_Body_Station::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:topy_resp.RegionResp.Body.Station.name)
}

// required string type = 5;
inline bool RegionResp_Body_Station::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegionResp_Body_Station::has_type() const {
  return _internal_has_type();
}
inline void RegionResp_Body_Station::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RegionResp_Body_Station::type() const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Body.Station.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegionResp_Body_Station::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:topy_resp.RegionResp.Body.Station.type)
}
inline std::string* RegionResp_Body_Station::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:topy_resp.RegionResp.Body.Station.type)
  return _s;
}
inline const std::string& RegionResp_Body_Station::_internal_type() const {
  return _impl_.type_.Get();
}
inline void RegionResp_Body_Station::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* RegionResp_Body_Station::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* RegionResp_Body_Station::release_type() {
  // @@protoc_insertion_point(field_release:topy_resp.RegionResp.Body.Station.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegionResp_Body_Station::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:topy_resp.RegionResp.Body.Station.type)
}

// -------------------------------------------------------------------

// RegionResp_Body

// repeated .topy_resp.RegionResp.Body.Polygon coordinates = 1;
inline int RegionResp_Body::_internal_coordinates_size() const {
  return _impl_.coordinates_.size();
}
inline int RegionResp_Body::coordinates_size() const {
  return _internal_coordinates_size();
}
inline void RegionResp_Body::clear_coordinates() {
  _impl_.coordinates_.Clear();
}
inline ::topy_resp::RegionResp_Body_Polygon* RegionResp_Body::mutable_coordinates(int index) {
  // @@protoc_insertion_point(field_mutable:topy_resp.RegionResp.Body.coordinates)
  return _impl_.coordinates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Polygon >*
RegionResp_Body::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:topy_resp.RegionResp.Body.coordinates)
  return &_impl_.coordinates_;
}
inline const ::topy_resp::RegionResp_Body_Polygon& RegionResp_Body::_internal_coordinates(int index) const {
  return _impl_.coordinates_.Get(index);
}
inline const ::topy_resp::RegionResp_Body_Polygon& RegionResp_Body::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Body.coordinates)
  return _internal_coordinates(index);
}
inline ::topy_resp::RegionResp_Body_Polygon* RegionResp_Body::_internal_add_coordinates() {
  return _impl_.coordinates_.Add();
}
inline ::topy_resp::RegionResp_Body_Polygon* RegionResp_Body::add_coordinates() {
  ::topy_resp::RegionResp_Body_Polygon* _add = _internal_add_coordinates();
  // @@protoc_insertion_point(field_add:topy_resp.RegionResp.Body.coordinates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Polygon >&
RegionResp_Body::coordinates() const {
  // @@protoc_insertion_point(field_list:topy_resp.RegionResp.Body.coordinates)
  return _impl_.coordinates_;
}

// required string id = 2;
inline bool RegionResp_Body::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionResp_Body::has_id() const {
  return _internal_has_id();
}
inline void RegionResp_Body::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegionResp_Body::id() const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Body.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegionResp_Body::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:topy_resp.RegionResp.Body.id)
}
inline std::string* RegionResp_Body::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:topy_resp.RegionResp.Body.id)
  return _s;
}
inline const std::string& RegionResp_Body::_internal_id() const {
  return _impl_.id_.Get();
}
inline void RegionResp_Body::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* RegionResp_Body::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* RegionResp_Body::release_id() {
  // @@protoc_insertion_point(field_release:topy_resp.RegionResp.Body.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegionResp_Body::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:topy_resp.RegionResp.Body.id)
}

// repeated .topy_resp.RegionResp.Body.Station stations = 3;
inline int RegionResp_Body::_internal_stations_size() const {
  return _impl_.stations_.size();
}
inline int RegionResp_Body::stations_size() const {
  return _internal_stations_size();
}
inline void RegionResp_Body::clear_stations() {
  _impl_.stations_.Clear();
}
inline ::topy_resp::RegionResp_Body_Station* RegionResp_Body::mutable_stations(int index) {
  // @@protoc_insertion_point(field_mutable:topy_resp.RegionResp.Body.stations)
  return _impl_.stations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Station >*
RegionResp_Body::mutable_stations() {
  // @@protoc_insertion_point(field_mutable_list:topy_resp.RegionResp.Body.stations)
  return &_impl_.stations_;
}
inline const ::topy_resp::RegionResp_Body_Station& RegionResp_Body::_internal_stations(int index) const {
  return _impl_.stations_.Get(index);
}
inline const ::topy_resp::RegionResp_Body_Station& RegionResp_Body::stations(int index) const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.Body.stations)
  return _internal_stations(index);
}
inline ::topy_resp::RegionResp_Body_Station* RegionResp_Body::_internal_add_stations() {
  return _impl_.stations_.Add();
}
inline ::topy_resp::RegionResp_Body_Station* RegionResp_Body::add_stations() {
  ::topy_resp::RegionResp_Body_Station* _add = _internal_add_stations();
  // @@protoc_insertion_point(field_add:topy_resp.RegionResp.Body.stations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::topy_resp::RegionResp_Body_Station >&
RegionResp_Body::stations() const {
  // @@protoc_insertion_point(field_list:topy_resp.RegionResp.Body.stations)
  return _impl_.stations_;
}

// -------------------------------------------------------------------

// RegionResp

// required .topy_resp.RegionResp.Header header = 1;
inline bool RegionResp::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool RegionResp::has_header() const {
  return _internal_has_header();
}
inline void RegionResp::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::topy_resp::RegionResp_Header& RegionResp::_internal_header() const {
  const ::topy_resp::RegionResp_Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::topy_resp::RegionResp_Header&>(
      ::topy_resp::_RegionResp_Header_default_instance_);
}
inline const ::topy_resp::RegionResp_Header& RegionResp::header() const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.header)
  return _internal_header();
}
inline void RegionResp::unsafe_arena_set_allocated_header(
    ::topy_resp::RegionResp_Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:topy_resp.RegionResp.header)
}
inline ::topy_resp::RegionResp_Header* RegionResp::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::topy_resp::RegionResp_Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::topy_resp::RegionResp_Header* RegionResp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:topy_resp.RegionResp.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::topy_resp::RegionResp_Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::topy_resp::RegionResp_Header* RegionResp::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::topy_resp::RegionResp_Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::topy_resp::RegionResp_Header* RegionResp::mutable_header() {
  ::topy_resp::RegionResp_Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:topy_resp.RegionResp.header)
  return _msg;
}
inline void RegionResp::set_allocated_header(::topy_resp::RegionResp_Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:topy_resp.RegionResp.header)
}

// required .topy_resp.RegionResp.Body body = 2;
inline bool RegionResp::_internal_has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline bool RegionResp::has_body() const {
  return _internal_has_body();
}
inline void RegionResp::clear_body() {
  if (_impl_.body_ != nullptr) _impl_.body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::topy_resp::RegionResp_Body& RegionResp::_internal_body() const {
  const ::topy_resp::RegionResp_Body* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::topy_resp::RegionResp_Body&>(
      ::topy_resp::_RegionResp_Body_default_instance_);
}
inline const ::topy_resp::RegionResp_Body& RegionResp::body() const {
  // @@protoc_insertion_point(field_get:topy_resp.RegionResp.body)
  return _internal_body();
}
inline void RegionResp::unsafe_arena_set_allocated_body(
    ::topy_resp::RegionResp_Body* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:topy_resp.RegionResp.body)
}
inline ::topy_resp::RegionResp_Body* RegionResp::release_body() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::topy_resp::RegionResp_Body* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::topy_resp::RegionResp_Body* RegionResp::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:topy_resp.RegionResp.body)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::topy_resp::RegionResp_Body* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::topy_resp::RegionResp_Body* RegionResp::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::topy_resp::RegionResp_Body>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::topy_resp::RegionResp_Body* RegionResp::mutable_body() {
  ::topy_resp::RegionResp_Body* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:topy_resp.RegionResp.body)
  return _msg;
}
inline void RegionResp::set_allocated_body(::topy_resp::RegionResp_Body* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:topy_resp.RegionResp.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace topy_resp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ee_2eproto
